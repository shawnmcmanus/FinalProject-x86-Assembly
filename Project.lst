Microsoft (R) Macro Assembler Version 14.38.33130.0	    09/02/24 22:16:15
<Project 6 - String Primitives and Macros     (Proj6_mcmansh  Page 1 - 1


				TITLE Project 6 - String Primitives and Macros     (Proj6_mcmansha.asm)

				; Author: Shawn McManus
				; Last Modified: 8/13/2024
				; OSU email address: mcmansha@oregonstate.edu
				; Course number/section:   CS271 Section 400
				; Project Number: 6                Due Date: 8/16/2024
				; Description: Uses macros and procedures to implement own 
				; low-level I/O procedures

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

				;----------------------------------------------------------------
				; Prompts an entry stores the input and total bytes of entry
				; receives: prompt, input storage address, buffer size, storage for number of bytes
				; returns: Number of bytes
				; preconditions: proper parameters are passed
				; registers changed: EAX, ECX, EDX
				;----------------------------------------------------------------

				mGetString MACRO prompt_para:REQ, input:REQ, count_para:REQ, bytesNum:REQ
					push	EAX
					push	ECX
					push	EDX

					mov		EDX, prompt_para			;Need to include OFFSET when filling in parameters
					call	WriteString
					mov		EDX, input					;Loads address of input buffer into EDX
					mov		ECX, count_para				;Buffer size		
					call	ReadString					
					mov     [bytesNum], EAX


					pop		EDX
					pop		ECX
					pop		EAX
				ENDM

				;----------------------------------------------------------------
				; Displays a string
				; receives: string address
				; returns: None
				; preconditions: passed address is for a string
				; registers changed: EDX
				;----------------------------------------------------------------

				mDisplayString MACRO string_para:REQ
					push	EDX

					mov		EDX, string_para
					call	WriteString

					pop		EDX
				ENDM
					
				;Global variables

 = 80000000			LOWER_RANGE = 80000000h			;Signed 32-bit register min (-2^31)
 = 7FFFFFFF			UPPER_RANGE = 7FFFFFFFh			;Signed 32-bit register max (2^31 - 1)
 = 0000000A			ARRAY_SIZE = 10

 00000000			.data

 00000000 50 52 4F 47 52	greeting			BYTE	"PROGRAMMING ASSIGNMENT 6: Designing low-level Input/Output procedures and macros.",13,10,
	   41 4D 4D 49 4E
	   47 20 41 53 53
	   49 47 4E 4D 45
	   4E 54 20 36 3A
	   20 44 65 73 69
	   67 6E 69 6E 67
	   20 6C 6F 77 2D
	   6C 65 76 65 6C
	   20 49 6E 70 75
	   74 2F 4F 75 74
	   70 75 74 20 70
	   72 6F 63 65 64
	   75 72 65 73 20
	   61 6E 64 20 6D
	   61 63 72 6F 73
	   2E 0D 0A 57 72
	   69 74 74 65 6E
	   20 62 79 3A 20
	   53 68 61 77 6E
	   20 4D 63 4D 61
	   6E 75 73 0D 0A
	   0D 0A 00
											"Written by: Shawn McManus",13,10,13,10,0
 00000071 50 6C 65 61 73	prompt_1			BYTE	"Please provide 10 signed decimal integers.",13,10,
	   65 20 70 72 6F
	   76 69 64 65 20
	   31 30 20 73 69
	   67 6E 65 64 20
	   64 65 63 69 6D
	   61 6C 20 69 6E
	   74 65 67 65 72
	   73 2E 0D 0A 45
	   61 63 68 20 6E
	   75 6D 62 65 72
	   20 6E 65 65 64
	   73 20 74 6F 20
	   62 65 20 73 6D
	   61 6C 6C 20 65
	   6E 6F 75 67 68
	   20 74 6F 20 66
	   69 74 20 69 6E
	   73 69 64 65 20
	   61 20 33 32 20
	   62 69 74 20 72
	   65 67 69 73 74
	   65 72 2E 20 41
	   66 74 65 72 20
	   79 6F 75 20 68
	   61 76 65 20 66
	   69 6E 69 73 68
	   65 64 20 69 6E
	   70 75 74 74 69
	   6E 67 74 68 65
	   20 72 61 77 20
	   6E 75 6D 62 65
	   72 73 20 49 20
	   77 69 6C 6C 20
	   64 69 73 70 6C
	   61 79 20 61 20
	   6C 69 73 74 20
	   6F 66 20 74 68
	   65 20 69 6E 74
	   65 67 65 72 73
	   2C 20 74 68 65
	   69 72 20 73 75
	   6D 2C 20 61 6E
	   64 20 74 68 65
	   69 72 20 61 76
	   65 72 61 67 65
	   20 76 61 6C 75
	   65 2E 0D 0A 00
											"Each number needs to be small enough to fit inside a 32 bit register. After you have finished inputting",
											"the raw numbers I will display a list of the integers, their sum, and their average value.",13,10,0
 00000161 50 6C 65 61 73	input_request		BYTE	"Please enter a signed number: ",0
	   65 20 65 6E 74
	   65 72 20 61 20
	   73 69 67 6E 65
	   64 20 6E 75 6D
	   62 65 72 3A 20
	   00
 00000180 45 52 52 4F 52	error_message		BYTE	"ERROR: You did not enter a signed number or your number was too big.",13,10,
	   3A 20 59 6F 75
	   20 64 69 64 20
	   6E 6F 74 20 65
	   6E 74 65 72 20
	   61 20 73 69 67
	   6E 65 64 20 6E
	   75 6D 62 65 72
	   20 6F 72 20 79
	   6F 75 72 20 6E
	   75 6D 62 65 72
	   20 77 61 73 20
	   74 6F 6F 20 62
	   69 67 2E 0D 0A
	   50 6C 65 61 73
	   65 20 74 72 79
	   20 61 67 61 69
	   6E 2E 0D 0A 00
											"Please try again.",13,10,0
 000001DA 0D 0A 59 6F 75	entry_message		BYTE	13,10,"You entered the following numbers:",13,10,0
	   20 65 6E 74 65
	   72 65 64 20 74
	   68 65 20 66 6F
	   6C 6C 6F 77 69
	   6E 67 20 6E 75
	   6D 62 65 72 73
	   3A 0D 0A 00
 00000201 2C 20 00		comma_sep			BYTE	", ",0
 00000204 54 68 65 20 73	sum_message			BYTE	"The sum of these numbers is: ",0
	   75 6D 20 6F 66
	   20 74 68 65 73
	   65 20 6E 75 6D
	   62 65 72 73 20
	   69 73 3A 20 00
 00000222 54 68 65 20 74	avg_message			BYTE	"The truncated average: ",0
	   72 75 6E 63 61
	   74 65 64 20 61
	   76 65 72 61 67
	   65 3A 20 00
 0000023A 0D 0A 54 68 61	farewell_message	BYTE	13,10,"Thanks for playing!",13,10,0
	   6E 6B 73 20 66
	   6F 72 20 70 6C
	   61 79 69 6E 67
	   21 0D 0A 00

 00000252  0000001F [		userVal				BYTE	31 DUP(?)
	    00
	   ]
 00000271 00000000		bytesNum			DWORD	?
 00000275  00000010 [		buffer				BYTE	16 DUP(?)				
	    00
	   ]
 00000285  0000000A [		intArray			SDWORD	ARRAY_SIZE DUP(?)
	    00000000
	   ]
 000002AD 00000000		sumVal				SDWORD	?
 000002B1 00000000		avgVal				SDWORD	?
 000002B5 00000000		count				DWORD	?						



 00000000			.code
 00000000			main PROC
 00000000  68 00000000 R		push	OFFSET greeting
 00000005  68 00000071 R		push	OFFSET prompt_1
 0000000A  E8 000000F2			call	introduction				;Prints out an intro message


 0000000F  B9 0000000A			mov		ECX, 10
 00000014  BF 00000285 R		mov		EDI, OFFSET intArray
 00000019			_getIntLoop:							;Loop for converting entries into integers
 00000019  68 80000000			push	LOWER_RANGE
 0000001E  68 00000180 R		push	OFFSET error_message
 00000023  FF 35 00000271 R		push	bytesNum
 00000029  6A 1F			push	SIZEOF userVal
 0000002B  68 00000252 R		push	OFFSET userVal
 00000030  68 00000161 R		push	OFFSET input_request
 00000035  E8 000000E2			call	read_val					;Read Val Proc
 0000003A  E2 DD			loop	_getIntLoop


					  mDisplayString OFFSET entry_message
 0000003C  52		     1		push	EDX
 0000003D  BA 000001DA R     1		mov		EDX, OFFSET entry_message
 00000042  E8 00000000 E     1		call	WriteString
 00000047  5A		     1		pop		EDX
 00000048  B9 0000000A			mov		ECX, ARRAY_SIZE
 0000004D  BE 00000285 R		mov		ESI, OFFSET intArray
 00000052  C7 05 000002B5 R		mov		count, ARRAY_SIZE - 1
	   00000009
 0000005C			_displayLoop:							;Loop for displaying values in the array
 0000005C  FF 35 000002B5 R		push	count
 00000062  68 00000201 R		push	OFFSET comma_sep
 00000067  6A 10			push	SIZEOF buffer
 00000069  68 00000275 R		push	OFFSET buffer
 0000006E  E8 00000139			call	write_val					;Write Val Proc
 00000073  83 C6 04			add		ESI, TYPE SDWORD			;Moves to next val in the array
 00000076  FF 0D 000002B5 R		dec		count						;Keeps count of values printed for comma placement
 0000007C  E2 DE			loop	_displayLoop
 0000007E  E8 00000000 E		call	CrLf


 00000083  C7 05 000002B5 R		mov		count, 0
	   00000000
 0000008D  BF 000002AD R		mov		EDI, OFFSET sumVal
 00000092  BE 00000285 R		mov		ESI, OFFSET intArray
 00000097  FF 35 000002B5 R		push	count						;Comma count
 0000009D  68 00000201 R		push	OFFSET comma_sep
 000000A2  6A 10			push	SIZEOF buffer
 000000A4  68 00000275 R		push	OFFSET buffer
 000000A9  68 00000204 R		push	OFFSET sum_message
 000000AE  E8 0000016F			call	sum_array					;Returns the sum of the array


 000000B3  C7 05 000002B5 R		mov		count, 0
	   00000000
 000000BD  BF 000002B1 R		mov		EDI, OFFSET avgVal
 000000C2  BE 00000285 R		mov		ESI, OFFSET intArray
 000000C7  68 7FFFFFFF			push	UPPER_RANGE
 000000CC  6A 0A			push	OFFSET ARRAY_SIZE
 000000CE  FF 35 000002AD R		push	sumVal
 000000D4  FF 35 000002B5 R		push	count
 000000DA  68 00000201 R		push	OFFSET comma_sep
 000000DF  6A 10			push	SIZEOF buffer
 000000E1  68 00000275 R		push	OFFSET buffer
 000000E6  68 00000222 R		push	OFFSET avg_message
 000000EB  E8 00000171			call	avg_array					;Returns the sum of the array


 000000F0  68 0000023A R		push	OFFSET farewell_message
 000000F5  E8 000001AF			call	conclusion					;Prints out goodbye message

					Invoke ExitProcess,0				; exit to operating system
 000000FA  6A 00	   *	    push   +000000000h
 000000FC  E8 00000000 E   *	    call   ExitProcess
 00000101			main ENDP


				;----------------------------------------------------------------
				; Introduces the programs purpose to the user
				; receives: offset of two strings (greeting & prompt_1)
				; returns: None
				; preconditions: mDisplayString macro and input strings defined already
				; registers changed: EBP
				;----------------------------------------------------------------

 00000101			introduction PROC
 00000101  55				push	EBP
 00000102  8B EC			mov		EBP, ESP
					  mDisplayString [EBP + 12]
 00000104  52		     1		push	EDX
 00000105  8B 55 0C	     1		mov		EDX, [EBP + 12]
 00000108  E8 00000000 E     1		call	WriteString
 0000010D  5A		     1		pop		EDX
					  mDisplayString [EBP + 8]
 0000010E  52		     1		push	EDX
 0000010F  8B 55 08	     1		mov		EDX, [EBP + 8]
 00000112  E8 00000000 E     1		call	WriteString
 00000117  5A		     1		pop		EDX
 00000118  5D				pop		EBP
 00000119  C2 0008			ret		8
 0000011C			introduction ENDP


				;----------------------------------------------------------------
				; Reads a string value that will later be converted into an integer
				; receives: parameters needed for mGetString macro
				; returns: None
				; preconditions: mGetString macro and parameters are set-up correctly
				; postconditions: single string input from the user is inserted into the array
				; registers changed: EBP, EAX, EBX, ECX, EDX, ESI, EDI
				;----------------------------------------------------------------

 0000011C			read_val PROC
 0000011C  55				push	EBP
 0000011D  8B EC			mov		EBP, ESP
 0000011F  50				push	EAX
 00000120  53				push	EBX
 00000121  51				push	ECX
 00000122  52				push	EDX
 00000123  56				push	ESI
 00000124			_enterValidVal:
					  mGetString [EBP + 8], [EBP + 12], [EBP + 16], [EBP + 20]
 00000124  50		     1		push	EAX
 00000125  51		     1		push	ECX
 00000126  52		     1		push	EDX
 00000127  8B 55 08	     1		mov		EDX, [EBP + 8]			;Need to include OFFSET when filling in parameters
 0000012A  E8 00000000 E     1		call	WriteString
 0000012F  8B 55 0C	     1		mov		EDX, [EBP + 12]					;Loads address of input buffer into EDX
 00000132  8B 4D 10	     1		mov		ECX, [EBP + 16]				;Buffer size		
 00000135  E8 00000000 E     1		call	ReadString					
 0000013A  89 45 14	     1		mov     [[EBP + 20]], EAX
 0000013D  5A		     1		pop		EDX
 0000013E  59		     1		pop		ECX
 0000013F  58		     1		pop		EAX
 00000140  FC				cld
 00000141  8B 75 0C			mov		ESI, [EBP + 12]				;Set ESI to address of userVal input
 00000144  8B 4D 14			mov		ECX, [EBP + 20]				;Set ECX to length of the string
 00000147  33 D2			xor		EDX, EDX
 00000149  33 DB			xor		EBX, EBX

 0000014B  AC				lodsb
 0000014C  3C 2D			cmp		AL, 45						;45 checks for negative
 0000014E  74 07			je		_negative
 00000150  3C 2B			cmp		AL, 43						;43 checks for positive
 00000152  74 07			je		_positive
 00000154  53				push	EBX
 00000155  EB 08			jmp		_noSign

 00000157			_negative:
 00000157  43				inc		EBX							;With EBX = 1, we say Sign Flag is set
 00000158  53				push	EBX
 00000159  EB 03			jmp		_convertLoop
					

 0000015B			_positive:
 0000015B  53				push	EBX
 0000015C  EB 00			jmp		_convertLoop
					

 0000015E			_convertLoop:
 0000015E  AC				lodsb								;Loads next character
 0000015F			_noSign:
 0000015F  3C 00			cmp		AL, 0						;Check if the character is the null terminator
 00000161  74 33			je		_conversionComplete

 00000163  3C 30			cmp		AL, 48						;Check if value is '0' to '9' with ASCII values
 00000165  7C 18			jl		_invalidInput
 00000167  3C 39			cmp		AL, 57
 00000169  7F 14			jg		_invalidInput

 0000016B  2C 30			sub		AL, 48						;Convert ASCII values to numeric values
 0000016D  0F B6 D8			movzx   EBX, AL						;Move and zero extend the numeric value in AL to EBX

 00000170  8B C2			mov     EAX, EDX					;Load the current total integer value from EDX
 00000172  6B C0 0A			imul    EAX, 10						;Multiply EAX by 10 to make space for the next digit
 00000175  70 08			jo		_invalidInput
 00000177  03 C3			add     EAX, EBX					;Add the new digit (from EBX) to the total value
 00000179  70 04			jo		_invalidInput
 0000017B  8B D0			mov     EDX, EAX					;Store the updated "integer" string value back in EDX

 0000017D  EB DF			jmp		_convertLoop

 0000017F			_invalidInput:
 0000017F				_edgeCaseContinue:
 0000017F  83 F9 0B				cmp		ECX, 11
 00000182  75 05				jne		_continue
 00000184  3B 45 1C				cmp		EAX, [EBP + 28]
 00000187  74 0D				je		_conversionComplete		;Val entered is -2147483648

 00000189				_continue:
						 mDisplayString [EBP + 24]		;Print error message
 00000189  52		     1		push	EDX
 0000018A  8B 55 18	     1		mov		EDX, [EBP + 24]
 0000018D  E8 00000000 E     1		call	WriteString
 00000192  5A		     1		pop		EDX
 00000193  5B					pop		EBX
 00000194  EB 8E				jmp _enterValidVal

 00000196			_conversionComplete:
 00000196  5B				pop		EBX
 00000197  83 FB 01			cmp		EBX, 1
 0000019A  75 02			jne		_storeInArray
 0000019C  F7 DA			neg		EDX

 0000019E			_storeInArray:
 0000019E  89 17			mov		[EDI], EDX
 000001A0  83 C7 04			add		EDI, TYPE SDWORD

 000001A3			_done:
 000001A3  5E				pop		ESI
 000001A4  5A				pop		EDX
 000001A5  59				pop		ECX
 000001A6  5B				pop		EBX
 000001A7  58				pop		EAX
 000001A8  5D				pop		EBP
 000001A9  C2 0018			ret		24
 000001AC			read_val ENDP


				;----------------------------------------------------------------
				; Converts a numeric SDWORD to a string of ASCII digits to be printed
				; receives: array of signed 32-bit integers
				; returns: None (prints out a string)
				; preconditions: necessary parameters passed and number held in ESI address
				; registers changed: EBP, EAX, EBX, ECX, EDX, ESI, EDI
				;----------------------------------------------------------------

 000001AC			write_val PROC
 000001AC  55				push	EBP
 000001AD  8B EC			mov		EBP, ESP
 000001AF  50				push	EAX
 000001B0  53				push	EBX
 000001B1  51				push	ECX
 000001B2  52				push	EDX
 000001B3  56				push	ESI

 000001B4  83 C6 03			add		ESI, 3							;Brings us to the beginning of the 32-bit integer
 000001B7  8B 7D 08			mov		EDI, [EBP + 8]
 000001BA  B9 00000004			mov		ECX, 4							;Each 32-bit number takes up 4 bytes in memory
 000001BF  FD				std										;Set flag to count reverse order

 000001C0			_invertStorageLoop:							;Reverse little-endian order and load into buffer [EDI]
 000001C0  AC				lodsb
 000001C1  AA				stosb
 000001C2  E2 FC			loop	_invertStorageLoop
															
 000001C4  47				inc		EDI								;store proper order of num ex: 01 23 45 67 in EDI
 000001C5  8B 07			mov		EAX, [EDI]						;Move hexadecimal representation of num into EAX
 000001C7  33 C9			xor		ECX, ECX
 000001C9			_checkForNeg:
 000001C9  83 F8 00			cmp		EAX, 0
 000001CC  7D 07			jge		_continue

 000001CE			_negative:
 000001CE  F7 D8			neg		EAX
 000001D0  B9 00000001			mov		ECX, 1							;Sets ECX for negative check

 000001D5			_continue:
 000001D5  8B 7D 08			mov		EDI, [EBP + 8]					;Move EDI to buffer
 000001D8  2B 7D 0C			sub		EDI, [EBP + 12]					;Create space for size of buffer
 000001DB  B3 00			mov		BL, 0
 000001DD  88 1F			mov		[EDI], BL						;Move null terminator to what will be the end of the ASCII values

 000001DF			_convertLoop:
 000001DF  33 D2			xor		EDX, EDX
 000001E1  BB 0000000A			mov		EBX, 10
 000001E6  F7 F3			div		EBX								;Divide hexadec number by 10
 000001E8  80 C2 30			add		DL, 48							;Add 48 (30h) to convert to ASCII value
 000001EB  4F				dec		EDI								;Moves to next byte in EDI
 000001EC  88 17			mov		[EDI], DL						;Places ASCII value into EDI index
 000001EE  83 F8 00			cmp		EAX, 0
 000001F1  75 EC			jne		_convertLoop
 000001F3  83 F9 01			cmp		ECX, 1							
 000001F6  75 05			jne		_printVal

 000001F8			_forNegative:
 000001F8  C6 47 FF 2D			mov		BYTE PTR [EDI - 1], '-'			;Add '-' byte to beginning of number
 000001FC  4F				dec		EDI

 000001FD			_printVal:
					  mDisplayString EDI
 000001FD  52		     1		push	EDX
 000001FE  8B D7	     1		mov		EDX, EDI
 00000200  E8 00000000 E     1		call	WriteString
 00000205  5A		     1		pop		EDX
 00000206  8B 4D 14			mov		ECX, [EBP + 20]
 00000209  83 F9 00			cmp		ECX, 0
 0000020C  74 08			je		_done							;Skips over comma append for last value
 0000020E  8B 55 10			mov		EDX, [EBP + 16]
 00000211  E8 00000000 E		call	WriteString						;Adds comma

 00000216			_done:
 00000216  83 C6 04			add		ESI, 4							;Moves to next 32-bit integer

 00000219  5E				pop		ESI
 0000021A  5A				pop		EDX
 0000021B  59				pop		ECX
 0000021C  5B				pop		EBX
 0000021D  58				pop		EAX
 0000021E  5D				pop		EBP
 0000021F  C2 0010			ret		16
 00000222			write_val ENDP

				;----------------------------------------------------------------
				; Calculates the sum of an array of values
				; receives: sum_message string
				; returns: sum of the array
				; preconditions: A valid array of numbers is passed 
				; registers changed: EBP, EAX, ECX, EDX, ESI, EDI
				;----------------------------------------------------------------

 00000222			sum_array PROC
 00000222  55				push	EBP
 00000223  8B EC			mov		EBP, ESP
 00000225  50				push	EAX
 00000226  51				push	ECX
 00000227  52				push	EDX
					
					  mDisplayString [EBP + 8]
 00000228  52		     1		push	EDX
 00000229  8B 55 08	     1		mov		EDX, [EBP + 8]
 0000022C  E8 00000000 E     1		call	WriteString
 00000231  5A		     1		pop		EDX
 00000232  33 C0			xor		EAX, EAX
 00000234  B9 0000000A			mov		ECX, 10							;Sets loop count to 10 (array size)				
 00000239			_sumLoop:
 00000239  03 06			add		EAX, [ESI]						;Add element from intArray and increment to next number in memory	
 0000023B  83 C6 04			add		ESI, TYPE intArray
 0000023E  E2 F9			loop	_sumLoop

 00000240  89 06			mov		[ESI], EAX						;Move sum to ESI index so write_val can print
 00000242  89 07			mov		[EDI], EAX						;Move sum to EDI index for avg_array proc
 00000244  FF 75 18			push	[EBP + 24]
 00000247  FF 75 14			push	[EBP + 20]
 0000024A  FF 75 10			push	[EBP + 16]
 0000024D  FF 75 0C			push	[EBP + 12]
 00000250  E8 FFFFFF57			call	write_val
 00000255  E8 00000000 E		call	CrLf

 0000025A  5A				pop		EDX
 0000025B  59				pop		ECX
 0000025C  58				pop		EAX
 0000025D  5D				pop		EBP
 0000025E  C2 0014			ret		20
 00000261			sum_array ENDP


				;----------------------------------------------------------------
				; Calculates the truncated average of an array of values
				; receives: avg_message string
				; returns: average of the array
				; preconditions: A valid sum is calculated and passed 
				; registers changed: EBP, EAX, EBX, EDX, ESI, EDI
				;----------------------------------------------------------------

 00000261			avg_array PROC
 00000261  55				push	EBP
 00000262  8B EC			mov		EBP, ESP
 00000264  50				push	EAX
 00000265  53				push	EBX
 00000266  52				push	EDX

					  mDisplayString [EBP + 8]
 00000267  52		     1		push	EDX
 00000268  8B 55 08	     1		mov		EDX, [EBP + 8]
 0000026B  E8 00000000 E     1		call	WriteString
 00000270  5A		     1		pop		EDX
 00000271  33 C0			xor		EAX, EAX
 00000273  33 D2			xor		EDX, EDX
 00000275  8B 45 1C			mov		EAX, [EBP + 28]					;Move sumVal into EAX
 00000278  8B 5D 24			mov		EBX, [EBP + 36]					;Move UPPER_RANGE to EBX

 0000027B			_negativeAvg:
 0000027B  F7 D8			neg		EAX								
 0000027D  8B 5D 20			mov		EBX, [EBP + 32]
 00000280  99				cdq
 00000281  F7 FB			idiv	EBX								;Divide by UPPER_RANGE
 00000283  F7 D8			neg		EAX								;Converts negatives back to negative and positives back to positives

 00000285			_printAvg:
 00000285  83 C6 04			add		ESI, TYPE intArray				
 00000288  89 06			mov		[ESI], EAX						;Move avgVal to ESI index for write_val
 0000028A  89 07			mov		[EDI], EAX						;Move avgVal to EDI index for storage
 0000028C  FF 75 18			push	[EBP + 24]
 0000028F  FF 75 14			push	[EBP + 20]
 00000292  FF 75 10			push	[EBP + 16]
 00000295  FF 75 0C			push	[EBP + 12]
 00000298  E8 FFFFFF0F			call	write_val
 0000029D  E8 00000000 E		call	CrLf

 000002A2  5A				pop		EDX
 000002A3  5B				pop		EBX
 000002A4  58				pop		EAX
 000002A5  5D				pop		EBP
 000002A6  C2 0020			ret		32
 000002A9			avg_array ENDP


				;----------------------------------------------------------------
				; Concludes the program
				; receives: farewell_message string
				; returns: None
				; preconditions: The rest of the program completed successfully 
				; registers changed: EBP
				;----------------------------------------------------------------

 000002A9			conclusion PROC
 000002A9  55				push	EBP
 000002AA  8B EC			mov		EBP, ESP
					  mDisplayString [EBP + 8]				;Print out farewell message
 000002AC  52		     1		push	EDX
 000002AD  8B 55 08	     1		mov		EDX, [EBP + 8]
 000002B0  E8 00000000 E     1		call	WriteString
 000002B5  5A		     1		pop		EDX
 000002B6  5D				pop		EBP
 000002B7  C2 0004			ret		4
 000002BA			conclusion ENDP

				END main
Microsoft (R) Macro Assembler Version 14.38.33130.0	    09/02/24 22:16:15
<Project 6 - String Primitives and Macros     (Proj6_mcmansh  Symbols 2 - 1




Macros:

                N a m e                 Type

mDisplayString . . . . . . . . .	Proc
mGetString . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 000002B9 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000002BA Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
avg_array  . . . . . . . . . . .	P Near	 00000261 _TEXT	Length= 00000048 Public STDCALL
  _negativeAvg . . . . . . . . .	L Near	 0000027B _TEXT	
  _printAvg  . . . . . . . . . .	L Near	 00000285 _TEXT	
conclusion . . . . . . . . . . .	P Near	 000002A9 _TEXT	Length= 00000011 Public STDCALL
introduction . . . . . . . . . .	P Near	 00000101 _TEXT	Length= 0000001B Public STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000101 Public STDCALL
  _getIntLoop  . . . . . . . . .	L Near	 00000019 _TEXT	
  _displayLoop . . . . . . . . .	L Near	 0000005C _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
read_val . . . . . . . . . . . .	P Near	 0000011C _TEXT	Length= 00000090 Public STDCALL
  _enterValidVal . . . . . . . .	L Near	 00000124 _TEXT	
  _negative  . . . . . . . . . .	L Near	 00000157 _TEXT	
  _positive  . . . . . . . . . .	L Near	 0000015B _TEXT	
  _convertLoop . . . . . . . . .	L Near	 0000015E _TEXT	
  _noSign  . . . . . . . . . . .	L Near	 0000015F _TEXT	
  _invalidInput  . . . . . . . .	L Near	 0000017F _TEXT	
  _edgeCaseContinue  . . . . . .	L Near	 0000017F _TEXT	
  _continue  . . . . . . . . . .	L Near	 00000189 _TEXT	
  _conversionComplete  . . . . .	L Near	 00000196 _TEXT	
  _storeInArray  . . . . . . . .	L Near	 0000019E _TEXT	
  _done  . . . . . . . . . . . .	L Near	 000001A3 _TEXT	
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
sum_array  . . . . . . . . . . .	P Near	 00000222 _TEXT	Length= 0000003F Public STDCALL
  _sumLoop . . . . . . . . . . .	L Near	 00000239 _TEXT	
write_val  . . . . . . . . . . .	P Near	 000001AC _TEXT	Length= 00000076 Public STDCALL
  _invertStorageLoop . . . . . .	L Near	 000001C0 _TEXT	
  _checkForNeg . . . . . . . . .	L Near	 000001C9 _TEXT	
  _negative  . . . . . . . . . .	L Near	 000001CE _TEXT	
  _continue  . . . . . . . . . .	L Near	 000001D5 _TEXT	
  _convertLoop . . . . . . . . .	L Near	 000001DF _TEXT	
  _forNegative . . . . . . . . .	L Near	 000001F8 _TEXT	
  _printVal  . . . . . . . . . .	L Near	 000001FD _TEXT	
  _done  . . . . . . . . . . . .	L Near	 00000216 _TEXT	
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
ARRAY_SIZE . . . . . . . . . . .	Number	 0000000Ah   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
LOWER_RANGE  . . . . . . . . . .	Number	 -80000000h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
UPPER_RANGE  . . . . . . . . . .	Number	 7FFFFFFFh   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
avgVal . . . . . . . . . . . . .	DWord	 000002B1 _DATA	
avg_message  . . . . . . . . . .	Byte	 00000222 _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
buffer . . . . . . . . . . . . .	Byte	 00000275 _DATA	
bytesNum . . . . . . . . . . . .	DWord	 00000271 _DATA	
comma_sep  . . . . . . . . . . .	Byte	 00000201 _DATA	
count  . . . . . . . . . . . . .	DWord	 000002B5 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
entry_message  . . . . . . . . .	Byte	 000001DA _DATA	
error_message  . . . . . . . . .	Byte	 00000180 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
farewell_message . . . . . . . .	Byte	 0000023A _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
greeting . . . . . . . . . . . .	Byte	 00000000 _DATA	
input_request  . . . . . . . . .	Byte	 00000161 _DATA	
intArray . . . . . . . . . . . .	DWord	 00000285 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
prompt_1 . . . . . . . . . . . .	Byte	 00000071 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
sumVal . . . . . . . . . . . . .	DWord	 000002AD _DATA	
sum_message  . . . . . . . . . .	Byte	 00000204 _DATA	
userVal  . . . . . . . . . . . .	Byte	 00000252 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
